@page "/inventory/add"
@rendermode InteractiveServer
@using Inventories.Data
@using Inventories.Models
@using Microsoft.EntityFrameworkCore
@inject IDbContextFactory<InventoryDbContext> DbContextFactory
@inject NavigationManager NavigationManager

<h3>在庫品　追加</h3>

<EditForm Model="this.newStockItem" OnValidSubmit="OnOkAsync">
    <DataAnnotationsValidator />
    <div>
        品名 <input class="form-control" type="text" @bind="newStockItem.Name" />
    </div>
    <div>
        ロット番号 <input class="form-control" type="text" @bind="newStockItem.LotNumber" />
    </div>
    <div>
        数量 <input class="form-control" type="number" @bind="newStockItem.Quantity" />
    </div>
    <div>
        入庫日 <input class="form-control" type="date" @bind="newStockItem.ArrivalDate" />
    </div>

    <ValidationSummary />
    <button class="btn btn-primary">追加</button>
    <button class="btn btn-primary" @onclick="OnCancel">キャンセル</button>
</EditForm>

@code {
    private StockItems newStockItem = new StockItems();

    /// <summary>
    /// 在庫を追加する
    /// </summary>
    /// <returns></returns>
    private async Task OnOkAsync()
    {
        await using var dbContext = await this.DbContextFactory.CreateDbContextAsync();
        await dbContext.StockItems.AddAsync(this.newStockItem);
        await dbContext.SaveChangesAsync();

        /// 在庫を追加した後、在庫一覧画面に戻る処理は、NavigationManagerをDIして実現する
        this.NavigationManager.NavigateTo("./inventory");
    }

    /// <summary>
    /// キャンセル（一覧画面に戻る）
    /// </summary>    
    private void OnCancel()
    {
        this.NavigationManager.NavigateTo("./inventory");
    }
}
